{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","_DB_NAME","_VERSION","_STORES","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_getConnetion","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;;AAEhC,QAAMC,WAAW,YAAjB;AACA,QAAMC,WAAW,CAAjB;AACA,QAAMC,UAAU,CAAC,aAAD,CAAhB;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AAEV,kBAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH;;AALL;AAAA;AAAA,4CAO2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,QAAtB,EAAgCC,QAAhC,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAI,CAACf,UAAL,EAAiB;AACbA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAvBM,CAAP;AAwBH;AAhCL;AAAA;AAAA,0CAkCyBrB,UAlCzB,EAkCqC;;AAE7BD,wBAAQuB,OAAR,CAAgB,iBAAS;AACrB,wBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACjDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBAHD;AAIH;AAxCL;AAAA;AAAA,8CA0C6B;AACrB,oBAAI5B,UAAJ,EAAgB;AACZC;AACAD,iCAAa,IAAb;AACH;AACJ;AA/CL;;AAAA;AAAA;AAiDH,CA1DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["let ConnectionFactory = (function() {\n\n    const _DB_NAME = 'aluraframe';\n    const _VERSION = 5;\n    const _STORES = ['negociacoes'];\n\n    var connection = null;\n    var close = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n\n            throw new Error('ConnectionFactory não pode ser instanciada');\n        }\n\n        static getConnection() {\n            return new Promise((resolve, reject) => {\n\n                let openRequest = window.indexedDB.open(_DB_NAME, _VERSION);\n\n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._getConnetion(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n                    if (!connection) {\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function() {\n                            throw new Error('Você não pode fechar diretamente a conexão');\n                        };\n                    };\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n        static _getConnetion(connection) {\n\n            _STORES.forEach(store => {\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n                connection.createObjectStore(store, { autoIncrement: true });\n            })\n        }\n\n        static closeConnection() {\n            if (connection) {\n                close();\n                connection = null;\n            }\n        }\n    }\n})();"]}