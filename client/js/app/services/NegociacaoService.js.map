{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","listaNegociacoes","map","Negociacao","Date","object","data","quantidade","valor","catch","console","log","error","Error","Promise","all","obterNegociacoesSemana","obterNegociacoesSemanaAnterior","obterNegociacoesSemanaRetrasada","negociacoes","periodos","reduce","dados","periodo","concat","dado","negociacao","ConnectionFactory","getConnection","NegociacaoDAO","connection","dao","adiciona","listaTodos","apagaTodos","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n\n\n    obterNegociacoesSemana() {\n\n        return this._http\n            .get('negociacoes/semana')\n            .then(listaNegociacoes => {\n                return listaNegociacoes.map(object => new Negociacao(new Date(object.data), object.quantidade, object.valor));\n            })\n            .catch(error => {\n                console.log(error);\n                throw new Error('Houve algum erro ao tentar listar as negociações!');\n            })\n    }\n    obterNegociacoesSemanaAnterior() {\n\n        return this._http\n            .get('negociacoes/anterior')\n            .then(listaNegociacoes => {\n                return listaNegociacoes.map(object => new Negociacao(new Date(object.data), object.quantidade, object.valor));\n            })\n            .catch(error => {\n                console.log(error);\n                throw new Error('Houve algum erro ao tentar listar as negociações da semana anterior!');\n            })\n    }\n    obterNegociacoesSemanaRetrasada() {\n\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(listaNegociacoes => {\n                return listaNegociacoes.map(object => new Negociacao(new Date(object.data), object.quantidade, object.valor));\n            })\n            .catch(error => {\n                console.log(error);\n                throw new Error('Houve algum erro ao tentar listar as negociações da semana retrasada!');\n            })\n    }\n    obterNegociacoes() {\n\n        return Promise.all([\n                this.obterNegociacoesSemana(),\n                this.obterNegociacoesSemanaAnterior(),\n                this.obterNegociacoesSemanaRetrasada()\n            ])\n            .then(periodos => {\n\n                let negociacoes = periodos\n                    .reduce((dados, periodo) => dados.concat(periodo), [])\n                    .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\n\n                return negociacoes;\n            })\n            .catch(error => {\n\n                throw new Error(error);\n            });\n    }\n\n    cadastra(negociacao) {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso!')\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possivel cadastrar a negociação')\n            });\n    }\n\n    lista() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.listaTodos())\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possivel listar as negociações')\n            });\n    }\n\n    apaga() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações pagadas com sucesso')\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possivel listar as negociações')\n            });\n    }\n\n    importa(listaNegociacoes) {\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaNegociacoes.some(negociacaoExistente =>\n                        negociacao.isEquals(negociacaoExistente)\n                    )\n                )\n            )\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possivel importar a lista de negociações');\n            });\n    }\n}"]}